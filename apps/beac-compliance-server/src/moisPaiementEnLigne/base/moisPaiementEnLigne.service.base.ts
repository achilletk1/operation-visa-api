/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MoisPaiementEnLigne as PrismaMoisPaiementEnLigne,
  Operation as PrismaOperation,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class MoisPaiementEnLigneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MoisPaiementEnLigneCountArgs, "select">
  ): Promise<number> {
    return this.prisma.moisPaiementEnLigne.count(args);
  }

  async moisPaiementEnLignes(
    args: Prisma.MoisPaiementEnLigneFindManyArgs
  ): Promise<PrismaMoisPaiementEnLigne[]> {
    return this.prisma.moisPaiementEnLigne.findMany(args);
  }
  async moisPaiementEnLigne(
    args: Prisma.MoisPaiementEnLigneFindUniqueArgs
  ): Promise<PrismaMoisPaiementEnLigne | null> {
    return this.prisma.moisPaiementEnLigne.findUnique(args);
  }
  async createMoisPaiementEnLigne(
    args: Prisma.MoisPaiementEnLigneCreateArgs
  ): Promise<PrismaMoisPaiementEnLigne> {
    return this.prisma.moisPaiementEnLigne.create(args);
  }
  async updateMoisPaiementEnLigne(
    args: Prisma.MoisPaiementEnLigneUpdateArgs
  ): Promise<PrismaMoisPaiementEnLigne> {
    return this.prisma.moisPaiementEnLigne.update(args);
  }
  async deleteMoisPaiementEnLigne(
    args: Prisma.MoisPaiementEnLigneDeleteArgs
  ): Promise<PrismaMoisPaiementEnLigne> {
    return this.prisma.moisPaiementEnLigne.delete(args);
  }

  async findOperations(
    parentId: string,
    args: Prisma.OperationFindManyArgs
  ): Promise<PrismaOperation[]> {
    return this.prisma.moisPaiementEnLigne
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operations(args);
  }

  async getUtilisateur(parentId: string): Promise<PrismaUtilisateur | null> {
    return this.prisma.moisPaiementEnLigne
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}
