/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Voyage as PrismaVoyage,
  Operation as PrismaOperation,
  Utilisateur as PrismaUtilisateur,
} from "@prisma/client";

export class VoyageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VoyageCountArgs, "select">): Promise<number> {
    return this.prisma.voyage.count(args);
  }

  async voyages(args: Prisma.VoyageFindManyArgs): Promise<PrismaVoyage[]> {
    return this.prisma.voyage.findMany(args);
  }
  async voyage(
    args: Prisma.VoyageFindUniqueArgs
  ): Promise<PrismaVoyage | null> {
    return this.prisma.voyage.findUnique(args);
  }
  async createVoyage(args: Prisma.VoyageCreateArgs): Promise<PrismaVoyage> {
    return this.prisma.voyage.create(args);
  }
  async updateVoyage(args: Prisma.VoyageUpdateArgs): Promise<PrismaVoyage> {
    return this.prisma.voyage.update(args);
  }
  async deleteVoyage(args: Prisma.VoyageDeleteArgs): Promise<PrismaVoyage> {
    return this.prisma.voyage.delete(args);
  }

  async findOperations(
    parentId: string,
    args: Prisma.OperationFindManyArgs
  ): Promise<PrismaOperation[]> {
    return this.prisma.voyage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operations(args);
  }

  async getUtilisateur(parentId: string): Promise<PrismaUtilisateur | null> {
    return this.prisma.voyage
      .findUnique({
        where: { id: parentId },
      })
      .utilisateur();
  }
}
