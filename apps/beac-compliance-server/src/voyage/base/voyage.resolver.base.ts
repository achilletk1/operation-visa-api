/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Voyage } from "./Voyage";
import { VoyageCountArgs } from "./VoyageCountArgs";
import { VoyageFindManyArgs } from "./VoyageFindManyArgs";
import { VoyageFindUniqueArgs } from "./VoyageFindUniqueArgs";
import { CreateVoyageArgs } from "./CreateVoyageArgs";
import { UpdateVoyageArgs } from "./UpdateVoyageArgs";
import { DeleteVoyageArgs } from "./DeleteVoyageArgs";
import { OperationFindManyArgs } from "../../operation/base/OperationFindManyArgs";
import { Operation } from "../../operation/base/Operation";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { VoyageService } from "../voyage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Voyage)
export class VoyageResolverBase {
  constructor(
    protected readonly service: VoyageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "read",
    possession: "any",
  })
  async _voyagesMeta(
    @graphql.Args() args: VoyageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Voyage])
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "read",
    possession: "any",
  })
  async voyages(@graphql.Args() args: VoyageFindManyArgs): Promise<Voyage[]> {
    return this.service.voyages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Voyage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "read",
    possession: "own",
  })
  async voyage(
    @graphql.Args() args: VoyageFindUniqueArgs
  ): Promise<Voyage | null> {
    const result = await this.service.voyage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Voyage)
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "create",
    possession: "any",
  })
  async createVoyage(@graphql.Args() args: CreateVoyageArgs): Promise<Voyage> {
    return await this.service.createVoyage({
      ...args,
      data: {
        ...args.data,

        utilisateur: args.data.utilisateur
          ? {
              connect: args.data.utilisateur,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Voyage)
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "update",
    possession: "any",
  })
  async updateVoyage(
    @graphql.Args() args: UpdateVoyageArgs
  ): Promise<Voyage | null> {
    try {
      return await this.service.updateVoyage({
        ...args,
        data: {
          ...args.data,

          utilisateur: args.data.utilisateur
            ? {
                connect: args.data.utilisateur,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Voyage)
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "delete",
    possession: "any",
  })
  async deleteVoyage(
    @graphql.Args() args: DeleteVoyageArgs
  ): Promise<Voyage | null> {
    try {
      return await this.service.deleteVoyage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Operation], { name: "operations" })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "any",
  })
  async findOperations(
    @graphql.Parent() parent: Voyage,
    @graphql.Args() args: OperationFindManyArgs
  ): Promise<Operation[]> {
    const results = await this.service.findOperations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Voyage
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
