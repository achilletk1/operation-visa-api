/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PieceJointe } from "./PieceJointe";
import { PieceJointeCountArgs } from "./PieceJointeCountArgs";
import { PieceJointeFindManyArgs } from "./PieceJointeFindManyArgs";
import { PieceJointeFindUniqueArgs } from "./PieceJointeFindUniqueArgs";
import { CreatePieceJointeArgs } from "./CreatePieceJointeArgs";
import { UpdatePieceJointeArgs } from "./UpdatePieceJointeArgs";
import { DeletePieceJointeArgs } from "./DeletePieceJointeArgs";
import { Categorie } from "../../categorie/base/Categorie";
import { TypePieceJointe } from "../../typePieceJointe/base/TypePieceJointe";
import { PieceJointeService } from "../pieceJointe.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PieceJointe)
export class PieceJointeResolverBase {
  constructor(
    protected readonly service: PieceJointeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "any",
  })
  async _pieceJointesMeta(
    @graphql.Args() args: PieceJointeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PieceJointe])
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "any",
  })
  async pieceJointes(
    @graphql.Args() args: PieceJointeFindManyArgs
  ): Promise<PieceJointe[]> {
    return this.service.pieceJointes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PieceJointe, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "own",
  })
  async pieceJointe(
    @graphql.Args() args: PieceJointeFindUniqueArgs
  ): Promise<PieceJointe | null> {
    const result = await this.service.pieceJointe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PieceJointe)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "create",
    possession: "any",
  })
  async createPieceJointe(
    @graphql.Args() args: CreatePieceJointeArgs
  ): Promise<PieceJointe> {
    return await this.service.createPieceJointe({
      ...args,
      data: {
        ...args.data,

        categorie: args.data.categorie
          ? {
              connect: args.data.categorie,
            }
          : undefined,

        typePieceJointe: args.data.typePieceJointe
          ? {
              connect: args.data.typePieceJointe,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PieceJointe)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "update",
    possession: "any",
  })
  async updatePieceJointe(
    @graphql.Args() args: UpdatePieceJointeArgs
  ): Promise<PieceJointe | null> {
    try {
      return await this.service.updatePieceJointe({
        ...args,
        data: {
          ...args.data,

          categorie: args.data.categorie
            ? {
                connect: args.data.categorie,
              }
            : undefined,

          typePieceJointe: args.data.typePieceJointe
            ? {
                connect: args.data.typePieceJointe,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PieceJointe)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "delete",
    possession: "any",
  })
  async deletePieceJointe(
    @graphql.Args() args: DeletePieceJointeArgs
  ): Promise<PieceJointe | null> {
    try {
      return await this.service.deletePieceJointe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Categorie, {
    nullable: true,
    name: "categorie",
  })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "any",
  })
  async getCategorie(
    @graphql.Parent() parent: PieceJointe
  ): Promise<Categorie | null> {
    const result = await this.service.getCategorie(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TypePieceJointe, {
    nullable: true,
    name: "typePieceJointe",
  })
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "read",
    possession: "any",
  })
  async getTypePieceJointe(
    @graphql.Parent() parent: PieceJointe
  ): Promise<TypePieceJointe | null> {
    const result = await this.service.getTypePieceJointe(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
