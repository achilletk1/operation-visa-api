/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PieceJointe as PrismaPieceJointe,
  Categorie as PrismaCategorie,
  TypePieceJointe as PrismaTypePieceJointe,
} from "@prisma/client";

export class PieceJointeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PieceJointeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pieceJointe.count(args);
  }

  async pieceJointes(
    args: Prisma.PieceJointeFindManyArgs
  ): Promise<PrismaPieceJointe[]> {
    return this.prisma.pieceJointe.findMany(args);
  }
  async pieceJointe(
    args: Prisma.PieceJointeFindUniqueArgs
  ): Promise<PrismaPieceJointe | null> {
    return this.prisma.pieceJointe.findUnique(args);
  }
  async createPieceJointe(
    args: Prisma.PieceJointeCreateArgs
  ): Promise<PrismaPieceJointe> {
    return this.prisma.pieceJointe.create(args);
  }
  async updatePieceJointe(
    args: Prisma.PieceJointeUpdateArgs
  ): Promise<PrismaPieceJointe> {
    return this.prisma.pieceJointe.update(args);
  }
  async deletePieceJointe(
    args: Prisma.PieceJointeDeleteArgs
  ): Promise<PrismaPieceJointe> {
    return this.prisma.pieceJointe.delete(args);
  }

  async getCategorie(parentId: string): Promise<PrismaCategorie | null> {
    return this.prisma.pieceJointe
      .findUnique({
        where: { id: parentId },
      })
      .categorie();
  }

  async getTypePieceJointe(
    parentId: string
  ): Promise<PrismaTypePieceJointe | null> {
    return this.prisma.pieceJointe
      .findUnique({
        where: { id: parentId },
      })
      .typePieceJointe();
  }
}
