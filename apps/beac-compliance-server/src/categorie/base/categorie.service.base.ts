/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Categorie as PrismaCategorie,
  Operation as PrismaOperation,
  PieceJointe as PrismaPieceJointe,
} from "@prisma/client";

export class CategorieServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategorieCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categorie.count(args);
  }

  async categories(
    args: Prisma.CategorieFindManyArgs
  ): Promise<PrismaCategorie[]> {
    return this.prisma.categorie.findMany(args);
  }
  async categorie(
    args: Prisma.CategorieFindUniqueArgs
  ): Promise<PrismaCategorie | null> {
    return this.prisma.categorie.findUnique(args);
  }
  async createCategorie(
    args: Prisma.CategorieCreateArgs
  ): Promise<PrismaCategorie> {
    return this.prisma.categorie.create(args);
  }
  async updateCategorie(
    args: Prisma.CategorieUpdateArgs
  ): Promise<PrismaCategorie> {
    return this.prisma.categorie.update(args);
  }
  async deleteCategorie(
    args: Prisma.CategorieDeleteArgs
  ): Promise<PrismaCategorie> {
    return this.prisma.categorie.delete(args);
  }

  async findOperations(
    parentId: string,
    args: Prisma.OperationFindManyArgs
  ): Promise<PrismaOperation[]> {
    return this.prisma.categorie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operations(args);
  }

  async findPieceJointes(
    parentId: string,
    args: Prisma.PieceJointeFindManyArgs
  ): Promise<PrismaPieceJointe[]> {
    return this.prisma.categorie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pieceJointes(args);
  }
}
