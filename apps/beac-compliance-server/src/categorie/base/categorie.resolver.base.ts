/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Categorie } from "./Categorie";
import { CategorieCountArgs } from "./CategorieCountArgs";
import { CategorieFindManyArgs } from "./CategorieFindManyArgs";
import { CategorieFindUniqueArgs } from "./CategorieFindUniqueArgs";
import { CreateCategorieArgs } from "./CreateCategorieArgs";
import { UpdateCategorieArgs } from "./UpdateCategorieArgs";
import { DeleteCategorieArgs } from "./DeleteCategorieArgs";
import { OperationFindManyArgs } from "../../operation/base/OperationFindManyArgs";
import { Operation } from "../../operation/base/Operation";
import { PieceJointeFindManyArgs } from "../../pieceJointe/base/PieceJointeFindManyArgs";
import { PieceJointe } from "../../pieceJointe/base/PieceJointe";
import { CategorieService } from "../categorie.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Categorie)
export class CategorieResolverBase {
  constructor(
    protected readonly service: CategorieService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "any",
  })
  async _categoriesMeta(
    @graphql.Args() args: CategorieCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Categorie])
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "any",
  })
  async categories(
    @graphql.Args() args: CategorieFindManyArgs
  ): Promise<Categorie[]> {
    return this.service.categories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Categorie, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "own",
  })
  async categorie(
    @graphql.Args() args: CategorieFindUniqueArgs
  ): Promise<Categorie | null> {
    const result = await this.service.categorie(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categorie)
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "create",
    possession: "any",
  })
  async createCategorie(
    @graphql.Args() args: CreateCategorieArgs
  ): Promise<Categorie> {
    return await this.service.createCategorie({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categorie)
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async updateCategorie(
    @graphql.Args() args: UpdateCategorieArgs
  ): Promise<Categorie | null> {
    try {
      return await this.service.updateCategorie({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Categorie)
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "delete",
    possession: "any",
  })
  async deleteCategorie(
    @graphql.Args() args: DeleteCategorieArgs
  ): Promise<Categorie | null> {
    try {
      return await this.service.deleteCategorie(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Operation], { name: "operations" })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "any",
  })
  async findOperations(
    @graphql.Parent() parent: Categorie,
    @graphql.Args() args: OperationFindManyArgs
  ): Promise<Operation[]> {
    const results = await this.service.findOperations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PieceJointe], { name: "pieceJointes" })
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "any",
  })
  async findPieceJointes(
    @graphql.Parent() parent: Categorie,
    @graphql.Args() args: PieceJointeFindManyArgs
  ): Promise<PieceJointe[]> {
    const results = await this.service.findPieceJointes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
