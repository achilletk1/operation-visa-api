/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CategorieService } from "../categorie.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CategorieCreateInput } from "./CategorieCreateInput";
import { Categorie } from "./Categorie";
import { CategorieFindManyArgs } from "./CategorieFindManyArgs";
import { CategorieWhereUniqueInput } from "./CategorieWhereUniqueInput";
import { CategorieUpdateInput } from "./CategorieUpdateInput";
import { OperationFindManyArgs } from "../../operation/base/OperationFindManyArgs";
import { Operation } from "../../operation/base/Operation";
import { OperationWhereUniqueInput } from "../../operation/base/OperationWhereUniqueInput";
import { PieceJointeFindManyArgs } from "../../pieceJointe/base/PieceJointeFindManyArgs";
import { PieceJointe } from "../../pieceJointe/base/PieceJointe";
import { PieceJointeWhereUniqueInput } from "../../pieceJointe/base/PieceJointeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CategorieControllerBase {
  constructor(
    protected readonly service: CategorieService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Categorie })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCategorie(
    @common.Body() data: CategorieCreateInput
  ): Promise<Categorie> {
    return await this.service.createCategorie({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        nom: true,
        piecesJointes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Categorie] })
  @ApiNestedQuery(CategorieFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async categories(@common.Req() request: Request): Promise<Categorie[]> {
    const args = plainToClass(CategorieFindManyArgs, request.query);
    return this.service.categories({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        nom: true,
        piecesJointes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Categorie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async categorie(
    @common.Param() params: CategorieWhereUniqueInput
  ): Promise<Categorie | null> {
    const result = await this.service.categorie({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        nom: true,
        piecesJointes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Categorie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCategorie(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() data: CategorieUpdateInput
  ): Promise<Categorie | null> {
    try {
      return await this.service.updateCategorie({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          nom: true,
          piecesJointes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Categorie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCategorie(
    @common.Param() params: CategorieWhereUniqueInput
  ): Promise<Categorie | null> {
    try {
      return await this.service.deleteCategorie({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          nom: true,
          piecesJointes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/operations")
  @ApiNestedQuery(OperationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "any",
  })
  async findOperations(
    @common.Req() request: Request,
    @common.Param() params: CategorieWhereUniqueInput
  ): Promise<Operation[]> {
    const query = plainToClass(OperationFindManyArgs, request.query);
    const results = await this.service.findOperations(params.id, {
      ...query,
      select: {
        categorie: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,

        moisPaiementEnLigne: {
          select: {
            id: true,
          },
        },

        montant: true,
        typeField: true,
        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },

        voyage: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/operations")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async connectOperations(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: OperationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operations: {
        connect: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/operations")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async updateOperations(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: OperationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operations: {
        set: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/operations")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async disconnectOperations(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: OperationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      operations: {
        disconnect: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pieceJointes")
  @ApiNestedQuery(PieceJointeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "any",
  })
  async findPieceJointes(
    @common.Req() request: Request,
    @common.Param() params: CategorieWhereUniqueInput
  ): Promise<PieceJointe[]> {
    const query = plainToClass(PieceJointeFindManyArgs, request.query);
    const results = await this.service.findPieceJointes(params.id, {
      ...query,
      select: {
        categorie: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        nomFichier: true,

        typePieceJointe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async connectPieceJointes(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        connect: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async updatePieceJointes(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        set: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "Categorie",
    action: "update",
    possession: "any",
  })
  async disconnectPieceJointes(
    @common.Param() params: CategorieWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        disconnect: body,
      },
    };
    await this.service.updateCategorie({
      where: params,
      data,
      select: { id: true },
    });
  }
}
