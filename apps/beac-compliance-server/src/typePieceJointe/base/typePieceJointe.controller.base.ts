/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TypePieceJointeService } from "../typePieceJointe.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TypePieceJointeCreateInput } from "./TypePieceJointeCreateInput";
import { TypePieceJointe } from "./TypePieceJointe";
import { TypePieceJointeFindManyArgs } from "./TypePieceJointeFindManyArgs";
import { TypePieceJointeWhereUniqueInput } from "./TypePieceJointeWhereUniqueInput";
import { TypePieceJointeUpdateInput } from "./TypePieceJointeUpdateInput";
import { PieceJointeFindManyArgs } from "../../pieceJointe/base/PieceJointeFindManyArgs";
import { PieceJointe } from "../../pieceJointe/base/PieceJointe";
import { PieceJointeWhereUniqueInput } from "../../pieceJointe/base/PieceJointeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TypePieceJointeControllerBase {
  constructor(
    protected readonly service: TypePieceJointeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TypePieceJointe })
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTypePieceJointe(
    @common.Body() data: TypePieceJointeCreateInput
  ): Promise<TypePieceJointe> {
    return await this.service.createTypePieceJointe({
      data: data,
      select: {
        createdAt: true,
        estObligatoire: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TypePieceJointe] })
  @ApiNestedQuery(TypePieceJointeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typePieceJointes(
    @common.Req() request: Request
  ): Promise<TypePieceJointe[]> {
    const args = plainToClass(TypePieceJointeFindManyArgs, request.query);
    return this.service.typePieceJointes({
      ...args,
      select: {
        createdAt: true,
        estObligatoire: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TypePieceJointe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typePieceJointe(
    @common.Param() params: TypePieceJointeWhereUniqueInput
  ): Promise<TypePieceJointe | null> {
    const result = await this.service.typePieceJointe({
      where: params,
      select: {
        createdAt: true,
        estObligatoire: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TypePieceJointe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTypePieceJointe(
    @common.Param() params: TypePieceJointeWhereUniqueInput,
    @common.Body() data: TypePieceJointeUpdateInput
  ): Promise<TypePieceJointe | null> {
    try {
      return await this.service.updateTypePieceJointe({
        where: params,
        data: data,
        select: {
          createdAt: true,
          estObligatoire: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TypePieceJointe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTypePieceJointe(
    @common.Param() params: TypePieceJointeWhereUniqueInput
  ): Promise<TypePieceJointe | null> {
    try {
      return await this.service.deleteTypePieceJointe({
        where: params,
        select: {
          createdAt: true,
          estObligatoire: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pieceJointes")
  @ApiNestedQuery(PieceJointeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PieceJointe",
    action: "read",
    possession: "any",
  })
  async findPieceJointes(
    @common.Req() request: Request,
    @common.Param() params: TypePieceJointeWhereUniqueInput
  ): Promise<PieceJointe[]> {
    const query = plainToClass(PieceJointeFindManyArgs, request.query);
    const results = await this.service.findPieceJointes(params.id, {
      ...query,
      select: {
        categorie: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        nomFichier: true,

        typePieceJointe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "update",
    possession: "any",
  })
  async connectPieceJointes(
    @common.Param() params: TypePieceJointeWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        connect: body,
      },
    };
    await this.service.updateTypePieceJointe({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "update",
    possession: "any",
  })
  async updatePieceJointes(
    @common.Param() params: TypePieceJointeWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        set: body,
      },
    };
    await this.service.updateTypePieceJointe({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pieceJointes")
  @nestAccessControl.UseRoles({
    resource: "TypePieceJointe",
    action: "update",
    possession: "any",
  })
  async disconnectPieceJointes(
    @common.Param() params: TypePieceJointeWhereUniqueInput,
    @common.Body() body: PieceJointeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pieceJointes: {
        disconnect: body,
      },
    };
    await this.service.updateTypePieceJointe({
      where: params,
      data,
      select: { id: true },
    });
  }
}
