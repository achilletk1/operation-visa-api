/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Utilisateur } from "./Utilisateur";
import { UtilisateurCountArgs } from "./UtilisateurCountArgs";
import { UtilisateurFindManyArgs } from "./UtilisateurFindManyArgs";
import { UtilisateurFindUniqueArgs } from "./UtilisateurFindUniqueArgs";
import { CreateUtilisateurArgs } from "./CreateUtilisateurArgs";
import { UpdateUtilisateurArgs } from "./UpdateUtilisateurArgs";
import { DeleteUtilisateurArgs } from "./DeleteUtilisateurArgs";
import { MoisPaiementEnLigneFindManyArgs } from "../../moisPaiementEnLigne/base/MoisPaiementEnLigneFindManyArgs";
import { MoisPaiementEnLigne } from "../../moisPaiementEnLigne/base/MoisPaiementEnLigne";
import { OperationFindManyArgs } from "../../operation/base/OperationFindManyArgs";
import { Operation } from "../../operation/base/Operation";
import { VoyageFindManyArgs } from "../../voyage/base/VoyageFindManyArgs";
import { Voyage } from "../../voyage/base/Voyage";
import { Role } from "../../role/base/Role";
import { UtilisateurService } from "../utilisateur.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Utilisateur)
export class UtilisateurResolverBase {
  constructor(
    protected readonly service: UtilisateurService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async _utilisateursMeta(
    @graphql.Args() args: UtilisateurCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Utilisateur])
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async utilisateurs(
    @graphql.Args() args: UtilisateurFindManyArgs
  ): Promise<Utilisateur[]> {
    return this.service.utilisateurs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Utilisateur, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "own",
  })
  async utilisateur(
    @graphql.Args() args: UtilisateurFindUniqueArgs
  ): Promise<Utilisateur | null> {
    const result = await this.service.utilisateur(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Utilisateur)
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "create",
    possession: "any",
  })
  async createUtilisateur(
    @graphql.Args() args: CreateUtilisateurArgs
  ): Promise<Utilisateur> {
    return await this.service.createUtilisateur({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Utilisateur)
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async updateUtilisateur(
    @graphql.Args() args: UpdateUtilisateurArgs
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.updateUtilisateur({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Utilisateur)
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "delete",
    possession: "any",
  })
  async deleteUtilisateur(
    @graphql.Args() args: DeleteUtilisateurArgs
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.deleteUtilisateur(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MoisPaiementEnLigne], {
    name: "moisPaiementEnLignes",
  })
  @nestAccessControl.UseRoles({
    resource: "MoisPaiementEnLigne",
    action: "read",
    possession: "any",
  })
  async findMoisPaiementEnLignes(
    @graphql.Parent() parent: Utilisateur,
    @graphql.Args() args: MoisPaiementEnLigneFindManyArgs
  ): Promise<MoisPaiementEnLigne[]> {
    const results = await this.service.findMoisPaiementEnLignes(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Operation], { name: "operations" })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "any",
  })
  async findOperations(
    @graphql.Parent() parent: Utilisateur,
    @graphql.Args() args: OperationFindManyArgs
  ): Promise<Operation[]> {
    const results = await this.service.findOperations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Voyage], { name: "voyages" })
  @nestAccessControl.UseRoles({
    resource: "Voyage",
    action: "read",
    possession: "any",
  })
  async findVoyages(
    @graphql.Parent() parent: Utilisateur,
    @graphql.Args() args: VoyageFindManyArgs
  ): Promise<Voyage[]> {
    const results = await this.service.findVoyages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async getRole(@graphql.Parent() parent: Utilisateur): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async UploadExcelFile(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadExcelFile(args);
  }
}
