/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Utilisateur as PrismaUtilisateur,
  MoisPaiementEnLigne as PrismaMoisPaiementEnLigne,
  Operation as PrismaOperation,
  Voyage as PrismaVoyage,
  Role as PrismaRole,
} from "@prisma/client";

export class UtilisateurServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UtilisateurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilisateur.count(args);
  }

  async utilisateurs(
    args: Prisma.UtilisateurFindManyArgs
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.utilisateur.findMany(args);
  }
  async utilisateur(
    args: Prisma.UtilisateurFindUniqueArgs
  ): Promise<PrismaUtilisateur | null> {
    return this.prisma.utilisateur.findUnique(args);
  }
  async createUtilisateur(
    args: Prisma.UtilisateurCreateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.create(args);
  }
  async updateUtilisateur(
    args: Prisma.UtilisateurUpdateArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.update(args);
  }
  async deleteUtilisateur(
    args: Prisma.UtilisateurDeleteArgs
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.delete(args);
  }

  async findMoisPaiementEnLignes(
    parentId: string,
    args: Prisma.MoisPaiementEnLigneFindManyArgs
  ): Promise<PrismaMoisPaiementEnLigne[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .moisPaiementEnLignes(args);
  }

  async findOperations(
    parentId: string,
    args: Prisma.OperationFindManyArgs
  ): Promise<PrismaOperation[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .operations(args);
  }

  async findVoyages(
    parentId: string,
    args: Prisma.VoyageFindManyArgs
  ): Promise<PrismaVoyage[]> {
    return this.prisma.utilisateur
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .voyages(args);
  }

  async getRole(parentId: string): Promise<PrismaRole | null> {
    return this.prisma.utilisateur
      .findUnique({
        where: { id: parentId },
      })
      .role();
  }
  async UploadExcelFile(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
